import base64
import zlib
import json
import enum
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.patches as patches


matplotlib.rc('font', size=6.5)

bp_str = "0eNqVlNFugzAMRf/Fz0GCwOjKr0zTFFKvtQQGJWFaVeXfF+hDq2205gmFkONjFN8LtN2EoyMO0FyA7MAemrcLeDqy6eZ34TwiNEABe1DApp9XwRn24+BC1mIXICogPuA3NEVUTw8b77FvO+Jj1ht7IsasvEPo+K4AOVAgvMosi/MHT32LLtVY01AwDj4dG3iunVCZVnBOjzLRD+TQXvf0LPkLqjdD9XNoKYcWYtNqM1Rg+iKGypn1Vqag+Z2YmYuZr1uZgt73Yqb8NhX5Vqig+eI2TZ/Gh4zYowtpZ/U2FfE/jH483iu/MsUFJD1aUgK7JOoGJptZcnaiOVj+VroNVTekGieTYuPwwDt/pF1Ju79SyjiH0xJnzV10KvhC55eP66rSdV7Uu3of4w9eGcpu"
bp_str = "0eNqVl+1ugjAUhu+lvyGhHxTlVpZlAexcEyimrcuM4d5XZNncdPieXwaBp89peaHnzNr+aA7eusjqM7Pd6AKrn84s2L1r+vm/eDoYVjMbzcAy5pphPmpCMEPbW7fPh6Z7s87kkk0Zs25nPljNp+whIvrGhcPoY96aPl7dLKbnjBkXbbRmkbkcnF7ccWiNT/R1jYwdxpBuHt08dgLmImOn9KOmWesPTBBhfIUlv1mvTYi5dcH4mE7cGsmFIlLVO+tNt5xTd5gKZRYwsoQ1OczU/63rLXSzQPlvqLgDrajQ4jFzgzM1ytxSmUjxvMCpFU7lVCpQPxc4VOGqEqeWsKqiqiLQkmoK1U/IlIBVCZmSMHRDNYXq31JVEarAY1XgUE6EApMqCKHiMFRSoVD5eKjw5Rd4qAimmmiKzGlFFEWYeKLglAo8T/CbTxZEJrJIkhOLh6B4nODvvsTTBH+gpCJ6QsWXRFEIimcJ3p1JPEvw7kRuiJ5Q8VuiKAJVBbwzX0z5vS5EkfujxVAmwaRnL72a6ZOoH53t8s767mjnDu12qJ9Q9WMa5K1JLdxuzbta8ZZEGP9iPe6h4CZKr+iVRL1yhaWJS7R43W06VQU/NMvkl9PcYF+a8fqq/c/Yu/HhcrVWSuiC60pvp+kTqdNeZw=="
#bp_str = ""

class Directions(enum.Enum):
    UP = 0
    RIGHT = 2
    DOWN = 4
    LEFT = 6

def plot_entities(entities, assemb=False, **kwargs):

    xs, ys = [], []
    for ent in entities:
        print("NAME", ent["name"])
        x = ent["position"]["x"]
        y = ent["position"]["y"]

        name = ent["name"]
        plt.annotate(name, xy=(x, y), xytext=(x, y))


        if assemb:
            x+=.5
            y+=.5

        xs.append(x)
        ys.append(y)


    plt.scatter(xs, ys, **kwargs)
    plt.xticks(list(range(-10, 10)))
    plt.yticks(list(range(-10, 10)))



def decode_bp(bp_str):
    bp_dict = json.loads(zlib.decompress(base64.b64decode(bp_str[1:])).decode("utf-8"))
    for ent in bp_dict["blueprint"]["entities"]:
        ent["position"]["y"] *= -1
    return bp_dict


def find_inserters_to_assembler(entities, assembler):
    assembler_x_rng = list(range(assembler["position"]["x"]-1, assembler["position"]["x"]+2))
    assembler_y_rng = list(range(assembler["position"]["y"]-1, assembler["position"]["y"]+2))

    print("XRANGE", assembler_x_rng)
    print("YRANGE", assembler_y_rng)

    for ent in entities:
        if not "inserter" in ent["name"]:
            continue
        if "direction" not in ent:
            ent["direction"] = Directions.UP #WTF

        x, y = ent["position"]["x"], ent["position"]["y"]
        mv_dist = 2 if ent["name"].startswith("long") else 1

        distance_vectors = {
            Directions.UP : (0, -mv_dist),
            Directions.LEFT : (mv_dist, 0),
            Directions.DOWN : (0, mv_dist),
            Directions.RIGHT : (-mv_dist, 0)
        }


        this_dir = Directions(ent["direction"])

        delta_vector = distance_vectors[this_dir]
        output_pos = x + delta_vector[0], y + delta_vector[1]

        print(ent["name"], ent["direction"], output_pos, "vec", delta_vector)

        if output_pos[0] in assembler_x_rng and output_pos[1] in assembler_y_rng:
            yield ent


def reduce_slightly(dist):
    if dist == 0: return 0
    reducer_const = 0.4
    sign = -1 if dist < 0 else 1
    return sign * (abs(dist) - reducer_const)







bp_dict = decode_bp(bp_str)
#print(json.dumps(bp_dict, indent=3))

entities = bp_dict["blueprint"]["entities"]

assemblers = [ent for ent in entities if ent["name"] == "assembling-machine-3"]

print(assemblers)


fig,ax = plt.subplots(1)

for assembler in assemblers:

    inserters = list(find_inserters_to_assembler(entities, assembler))

    ass_x, ass_y = assembler["position"]["x"], assembler["position"]["y"]
    patch = patches.Rectangle((ass_x-1, ass_y-1), 3, 3, alpha=0.3)
    ax.add_patch(patch)

    for inserter in inserters:
        ins_x, ins_y = inserter["position"]["x"], inserter["position"]["y"]

        spacing = 0.3
        ax.arrow(inserter["position"]["x"], inserter["position"]["y"], (ass_x-ins_x), (ass_y-ins_y), head_width=.3)
    plot_entities(inserters)
    plot_entities(assemblers, color="red", assemb=True)
    print(inserters)
plt.show()

